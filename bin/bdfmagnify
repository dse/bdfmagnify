#!/usr/bin/perl
use warnings;
use strict;

my $width_mult;
my $height_mult;
my $dot_width;
my $dot_height;
my $phosphor;

use Getopt::Long;
Getopt::Long::Configure("bundling", "gnu_compat");
Getopt::Long::GetOptions("w|width=i" => \$width_mult,
			 "h|height=i" => \$height_mult,
			 "W|dot-width=i" => \$dot_width,
			 "H|dot-height=i" => \$dot_height,
			 "p|phosphor" => \$phosphor,
			 "help" => sub { usage(); exit(0); })
  or die("Type '$0 --help' for help.\n");

$width_mult  //= 3;
$height_mult //= 3;
$dot_width   //= $width_mult;
$dot_height  //= $height_mult;
$phosphor    //= 0;

sub usage { print(<<"END"); }
usage: $0 [OPTION ...] BDF >BDF
options:
  -w, --width=PIXELS
  -h, --height=PIXELS
  -W, --dot-width=PIXELS
  -H, --dot-height=PIXELS
  -p, --phosphor
  -?, --help
END

my $dwidth;			# per char.
my $dest_dwidth;

while (<>) {
    if (m{^ \s* FONT \s+
	  -([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)
	  -([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)-([^-]*)}xi) {
	my ($foundry, $family, $weight, $slant, $width, $style, $pixel, $point, $res_x, $res_y, $spacing, $avgwidth, $registry, $encoding) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);
	$pixel *= $height_mult;
	$point *= $height_mult;
	if (lc($weight) eq "medium") {
	    $weight = "semicondensed";
	    $avgwidth = int($avgwidth * $width_mult / $height_mult + 0.5);
	}
	print("FONT -${foundry}-${family}-${weight}-${slant}-${width}-${style}-${pixel}-${point}-${res_x}-${res_y}-${spacing}-${avgwidth}-${registry}-${encoding}\n");
    }
    elsif (s{^( \s* size \s+ )(-?\d+)}{$1 . ($2 * $height_mult)}exi) {
	print;
    }
    elsif (s{^( \s* pixel_size \s+ )(-?\d+)}{$1 . ($2 * $height_mult)}exi) {
	print;
    }
    elsif (s{^( \s* average_width \s+ )(-?\d+)}{$1 . int($2 * $width_mult / $height_mult + 0.5)}exi) {
	print;
    }
    elsif (s{^( \s* (?:cap|x)_height \s+ )(-?\d+)}{$1 . ($2 * $height_mult)}exi) {
	print;
    }
    elsif (s{^( \s* font_(?:descent|ascent) \s+ )(-?\d+)}{$1 . ($2 * $height_mult)}exi) {
	print;
    }
    elsif (s{^( \s* quad_width \s+ )(-?\d+)}{$1 . ($2 * $width_mult)}exi) {
	print;
    }
    elsif (s{^( \s* swidth \s+ )(-?\d+)}{$1 . int($2 * $width_mult / $height_mult + 0.5)}exi) {
	print;
    }
    elsif (s{^( \s* dwidth \s+ )(-?\d+)}{$1 . ($2 * $width_mult)}exi) {
	$dwidth = $2;
	$dest_dwidth = $dwidth * $width_mult;
	print;
    }
    elsif (s{^ \s* bbx \s+ (-?\d+) \s+ (-?\d+) \s+ (-?\d+) \s+ (-?\d+)}
	    {sprintf("BBX %d %d %d %d", $1 * $width_mult, $2 * $height_mult, $3 * $width_mult, $4 * $height_mult)}exi) {
	print;
    }
    elsif (s{^ \s* fontboundingbox \s+ (-?\d+) \s+ (-?\d+) \s+ (-?\d+) \s+ (-?\d+)}
	    {sprintf("FONTBOUNDINGBOX %d %d %d %d", $1 * $width_mult, $2 * $height_mult, $3 * $width_mult, $4 * $height_mult)}exi) {
	print;
    }
    elsif (m{^\s*bitmap\b}xi) {
	print;
	while (<>) {
	    if (m{^\s*endchar\b}xi) {
		print;
		last;
	    }
	    chomp();
	    s{\r}{}g;

	    my $bits = pack("H" . length($_), $_);
	    $bits = unpack("B" . $dwidth, $bits);
	    my @bits = split('', $bits);
	    $bits = join("", map { ($_ x $dot_width) . ("0" x ($width_mult - $dot_width)) } @bits);
	    $bits = substr($bits, 0, $dest_dwidth);
	    $bits = pack(("B" . $dest_dwidth), $bits);
	    $bits = unpack("H" . int(($dest_dwidth + 3) / 4), $bits);

	    foreach (1 .. $height_mult - $dot_height) {
		print(("0" x length($bits)), "\n");
	    }
	    if ($phosphor && $dot_height > 2) {

		my $length = length($bits);
		my $hex2 = hex($bits);
		$hex2 = $hex2 | $hex2 >> 1 | $hex2 << 1;
		my $bits2 = sprintf("%0" . $length . "X", $hex2);

		print("$bits\n");
		foreach (1 .. $dot_height - 2) {
		    print("$bits2\n");
		}
		print("$bits\n");
	    } else {
		foreach (1 .. $dot_height) {
		    print("$bits\n");
		}
	    }
	}
    }
    else {
	print;
    }
}

